// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: proto/policymanager.proto

package policy_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	TenantID  string `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	Requestor string `protobuf:"bytes,3,opt,name=requestor,proto3" json:"requestor,omitempty"`
	User      string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *PolicyRequest) Reset() {
	*x = PolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_policymanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRequest) ProtoMessage() {}

func (x *PolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_policymanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRequest.ProtoReflect.Descriptor instead.
func (*PolicyRequest) Descriptor() ([]byte, []int) {
	return file_proto_policymanager_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PolicyRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *PolicyRequest) GetRequestor() string {
	if x != nil {
		return x.Requestor
	}
	return ""
}

func (x *PolicyRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// TODO should use enums ?
type PolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url                    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Profile                int32  `protobuf:"varint,2,opt,name=profile,proto3" json:"profile,omitempty"`
	Type                   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Subdomain              int32  `protobuf:"varint,4,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	Download               int32  `protobuf:"varint,5,opt,name=download,proto3" json:"download,omitempty"`
	Upload                 int32  `protobuf:"varint,6,opt,name=upload,proto3" json:"upload,omitempty"`
	Clipboard              int32  `protobuf:"varint,7,opt,name=clipboard,proto3" json:"clipboard,omitempty"`
	Cookies                int32  `protobuf:"varint,8,opt,name=cookies,proto3" json:"cookies,omitempty"`
	Access                 int32  `protobuf:"varint,9,opt,name=access,proto3" json:"access,omitempty"`
	Suspend                int32  `protobuf:"varint,10,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Printing               int32  `protobuf:"varint,11,opt,name=printing,proto3" json:"printing,omitempty"`
	IgnoreCertErrors       int32  `protobuf:"varint,12,opt,name=ignore_cert_errors,json=ignoreCertErrors,proto3" json:"ignore_cert_errors,omitempty"`
	Media                  int32  `protobuf:"varint,13,opt,name=media,proto3" json:"media,omitempty"`
	Adblock                int32  `protobuf:"varint,14,opt,name=adblock,proto3" json:"adblock,omitempty"`
	Readonly               int32  `protobuf:"varint,15,opt,name=readonly,proto3" json:"readonly,omitempty"`
	WhiteAv                int32  `protobuf:"varint,16,opt,name=white_av,json=whiteAv,proto3" json:"white_av,omitempty"`
	Autofill               int32  `protobuf:"varint,17,opt,name=autofill,proto3" json:"autofill,omitempty"`
	ClientCert             int32  `protobuf:"varint,18,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	Dlp                    int32  `protobuf:"varint,19,opt,name=dlp,proto3" json:"dlp,omitempty"`
	InheritWhiteCookies    int32  `protobuf:"varint,20,opt,name=inherit_white_cookies,json=inheritWhiteCookies,proto3" json:"inherit_white_cookies,omitempty"`
	ControlHeaders         int32  `protobuf:"varint,21,opt,name=control_headers,json=controlHeaders,proto3" json:"control_headers,omitempty"`
	VmiScreenSharing       int32  `protobuf:"varint,22,opt,name=vmi_screen_sharing,json=vmiScreenSharing,proto3" json:"vmi_screen_sharing,omitempty"`
	VideoPlayback          int32  `protobuf:"varint,23,opt,name=video_playback,json=videoPlayback,proto3" json:"video_playback,omitempty"`
	DownloadFtr            int32  `protobuf:"varint,24,opt,name=download_ftr,json=downloadFtr,proto3" json:"download_ftr,omitempty"`
	UploadFtr              int32  `protobuf:"varint,25,opt,name=upload_ftr,json=uploadFtr,proto3" json:"upload_ftr,omitempty"`
	ExperimentalBrowser    int32  `protobuf:"varint,26,opt,name=experimental_browser,json=experimentalBrowser,proto3" json:"experimental_browser,omitempty"`
	Comment                string `protobuf:"bytes,27,opt,name=comment,proto3" json:"comment,omitempty"`
	ProfileName            string `protobuf:"bytes,28,opt,name=profileName,proto3" json:"profileName,omitempty"`
	DownloadCdrNamedPolicy string `protobuf:"bytes,29,opt,name=downloadCdrNamedPolicy,proto3" json:"downloadCdrNamedPolicy,omitempty"`
	UploadCdrNamedPolicy   string `protobuf:"bytes,30,opt,name=uploadCdrNamedPolicy,proto3" json:"uploadCdrNamedPolicy,omitempty"`
	DownloadFtrNamedPolicy string `protobuf:"bytes,31,opt,name=downloadFtrNamedPolicy,proto3" json:"downloadFtrNamedPolicy,omitempty"`
	UploadFtrNamedPolicy   string `protobuf:"bytes,32,opt,name=uploadFtrNamedPolicy,proto3" json:"uploadFtrNamedPolicy,omitempty"`
	SecurityGroupID        int32  `protobuf:"varint,33,opt,name=securityGroupID,proto3" json:"securityGroupID,omitempty"`
	CategoryGroupName      string `protobuf:"bytes,34,opt,name=categoryGroupName,proto3" json:"categoryGroupName,omitempty"`
	CategoryPrimaryName    string `protobuf:"bytes,35,opt,name=categoryPrimaryName,proto3" json:"categoryPrimaryName,omitempty"`
	MatchedOn              string `protobuf:"bytes,36,opt,name=matchedOn,proto3" json:"matchedOn,omitempty"`
}

func (x *PolicyResponse) Reset() {
	*x = PolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_policymanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyResponse) ProtoMessage() {}

func (x *PolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_policymanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyResponse.ProtoReflect.Descriptor instead.
func (*PolicyResponse) Descriptor() ([]byte, []int) {
	return file_proto_policymanager_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PolicyResponse) GetProfile() int32 {
	if x != nil {
		return x.Profile
	}
	return 0
}

func (x *PolicyResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PolicyResponse) GetSubdomain() int32 {
	if x != nil {
		return x.Subdomain
	}
	return 0
}

func (x *PolicyResponse) GetDownload() int32 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *PolicyResponse) GetUpload() int32 {
	if x != nil {
		return x.Upload
	}
	return 0
}

func (x *PolicyResponse) GetClipboard() int32 {
	if x != nil {
		return x.Clipboard
	}
	return 0
}

func (x *PolicyResponse) GetCookies() int32 {
	if x != nil {
		return x.Cookies
	}
	return 0
}

func (x *PolicyResponse) GetAccess() int32 {
	if x != nil {
		return x.Access
	}
	return 0
}

func (x *PolicyResponse) GetSuspend() int32 {
	if x != nil {
		return x.Suspend
	}
	return 0
}

func (x *PolicyResponse) GetPrinting() int32 {
	if x != nil {
		return x.Printing
	}
	return 0
}

func (x *PolicyResponse) GetIgnoreCertErrors() int32 {
	if x != nil {
		return x.IgnoreCertErrors
	}
	return 0
}

func (x *PolicyResponse) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *PolicyResponse) GetAdblock() int32 {
	if x != nil {
		return x.Adblock
	}
	return 0
}

func (x *PolicyResponse) GetReadonly() int32 {
	if x != nil {
		return x.Readonly
	}
	return 0
}

func (x *PolicyResponse) GetWhiteAv() int32 {
	if x != nil {
		return x.WhiteAv
	}
	return 0
}

func (x *PolicyResponse) GetAutofill() int32 {
	if x != nil {
		return x.Autofill
	}
	return 0
}

func (x *PolicyResponse) GetClientCert() int32 {
	if x != nil {
		return x.ClientCert
	}
	return 0
}

func (x *PolicyResponse) GetDlp() int32 {
	if x != nil {
		return x.Dlp
	}
	return 0
}

func (x *PolicyResponse) GetInheritWhiteCookies() int32 {
	if x != nil {
		return x.InheritWhiteCookies
	}
	return 0
}

func (x *PolicyResponse) GetControlHeaders() int32 {
	if x != nil {
		return x.ControlHeaders
	}
	return 0
}

func (x *PolicyResponse) GetVmiScreenSharing() int32 {
	if x != nil {
		return x.VmiScreenSharing
	}
	return 0
}

func (x *PolicyResponse) GetVideoPlayback() int32 {
	if x != nil {
		return x.VideoPlayback
	}
	return 0
}

func (x *PolicyResponse) GetDownloadFtr() int32 {
	if x != nil {
		return x.DownloadFtr
	}
	return 0
}

func (x *PolicyResponse) GetUploadFtr() int32 {
	if x != nil {
		return x.UploadFtr
	}
	return 0
}

func (x *PolicyResponse) GetExperimentalBrowser() int32 {
	if x != nil {
		return x.ExperimentalBrowser
	}
	return 0
}

func (x *PolicyResponse) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *PolicyResponse) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *PolicyResponse) GetDownloadCdrNamedPolicy() string {
	if x != nil {
		return x.DownloadCdrNamedPolicy
	}
	return ""
}

func (x *PolicyResponse) GetUploadCdrNamedPolicy() string {
	if x != nil {
		return x.UploadCdrNamedPolicy
	}
	return ""
}

func (x *PolicyResponse) GetDownloadFtrNamedPolicy() string {
	if x != nil {
		return x.DownloadFtrNamedPolicy
	}
	return ""
}

func (x *PolicyResponse) GetUploadFtrNamedPolicy() string {
	if x != nil {
		return x.UploadFtrNamedPolicy
	}
	return ""
}

func (x *PolicyResponse) GetSecurityGroupID() int32 {
	if x != nil {
		return x.SecurityGroupID
	}
	return 0
}

func (x *PolicyResponse) GetCategoryGroupName() string {
	if x != nil {
		return x.CategoryGroupName
	}
	return ""
}

func (x *PolicyResponse) GetCategoryPrimaryName() string {
	if x != nil {
		return x.CategoryPrimaryName
	}
	return ""
}

func (x *PolicyResponse) GetMatchedOn() string {
	if x != nil {
		return x.MatchedOn
	}
	return ""
}

var File_proto_policymanager_proto protoreflect.FileDescriptor

var file_proto_policymanager_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x0d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xef, 0x09, 0x0a, 0x0e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x65, 0x72, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x77, 0x68, 0x69, 0x74, 0x65, 0x41, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6c, 0x70, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x6c, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x6d, 0x69, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x76, 0x6d, 0x69, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x74, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x74, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x12, 0x31,
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x64, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x64, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x64, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x64, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x32, 0x5b, 0x0a,
	0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_policymanager_proto_rawDescOnce sync.Once
	file_proto_policymanager_proto_rawDescData = file_proto_policymanager_proto_rawDesc
)

func file_proto_policymanager_proto_rawDescGZIP() []byte {
	file_proto_policymanager_proto_rawDescOnce.Do(func() {
		file_proto_policymanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_policymanager_proto_rawDescData)
	})
	return file_proto_policymanager_proto_rawDescData
}

var file_proto_policymanager_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_policymanager_proto_goTypes = []interface{}{
	(*PolicyRequest)(nil),  // 0: policymanager.PolicyRequest
	(*PolicyResponse)(nil), // 1: policymanager.PolicyResponse
}
var file_proto_policymanager_proto_depIdxs = []int32{
	0, // 0: policymanager.PolicyManager.GetPolicy:input_type -> policymanager.PolicyRequest
	1, // 1: policymanager.PolicyManager.GetPolicy:output_type -> policymanager.PolicyResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_policymanager_proto_init() }
func file_proto_policymanager_proto_init() {
	if File_proto_policymanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_policymanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_policymanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_policymanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_policymanager_proto_goTypes,
		DependencyIndexes: file_proto_policymanager_proto_depIdxs,
		MessageInfos:      file_proto_policymanager_proto_msgTypes,
	}.Build()
	File_proto_policymanager_proto = out.File
	file_proto_policymanager_proto_rawDesc = nil
	file_proto_policymanager_proto_goTypes = nil
	file_proto_policymanager_proto_depIdxs = nil
}
